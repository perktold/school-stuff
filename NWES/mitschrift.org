#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../SWP_Holzmann/style.css" />

* Bus systeme
Dienen zum Datenaustausch zwischen verschiedenen Geräten oder zwischen verschiedenen Komponenten des selben Geräts.

verschiedene Busse haben verschiedene Anforderungen bezüglich Distanz und Übertragungsgeschwindigkeit. Grundsätzlich: je kürzer die Distanz, desdo schneller

[[./../OfficeLense/2020_09_17 16_27 Office Lens.jpg][I²C Bus]]

2 Arten der Übertragung:
+ Paralell:
  + mehrere zusammengehörige bits werden gleichzeitig auf mehreren Leitungen übertragen
  + schnell aber hoher Hardwareaufwand → nur über relativ kurze Distanzen, zb innerhalb eines PC
+ seriell:
  + bits werden hintereinander (seriell) auf einer Leitung geschickt
  + langsam, niedrigerer Hardwareaufwand
    
** Prinzipien, die für alle Bus-Systeme gelten:

*** Topologie:
    beschreibt, wie die einzelnen Geräte, die am Bus-System hängen, verbunden sind.

**** Peer-to-Peer (zb UART):
     [[./../OfficeLense/2020_09_17 16_55 Office Lens (1).jpg][Peer-to-Peer Bus]]
     Nachteil: nur zwei Teilnehmer
     Vorteil: keine Addressierung nötig
     (zb serial beim Arduino

**** Linientopologien (zb CAN-Bus):
     [[./../OfficeLense/2020_09_17 16_55 Office Lens (2).jpg][CAN-Bus]]
     einfachste Möglichkeit Geräte zu verbinden, so dass jeder mit jedem Kommunizieren kann
     Nachteil: unterbrechung an einer Stelle führt zu Kommunikationsunterbrechung -> Umbauen des Systems im laufenden Betrieb nicht möglich

**** Ringtopologie:
     [[./../OfficeLense/2020_09_17 17_11 Office Lens.jpg][Ring-Bus]]
     Vorteil: Umbauen des Systems im laufenden Betriebs möglich

**** Baumtopologie:
     [[../OfficeLense/2020_09_17 17_34 Office Lens (1).jpg][Baum-Bus]]
     Vorteil: die Kommunikation in einem untersystem blockiert die Kommunikation in einem anderen Untersystem nicht.
     
**** Sterntopologie:
     [[../OfficeLense/2020_09_17 17_34 Office Lens (2).jpg][Stern-Bus]]
     Nachteil: Peripheriegeräte können nur über Zentralgerät kommunizieren, was oft aber gar nicht nötig ist.
     Beispiel: PC als Zentralknoten, Maus, Tastatur, etc als Peripheriegeräte (duh)

     Nachteil bei Linien- und Ringtopologien: wenn ein Teilnehmer sendet, ist der Bus blockiert.

*** Master/Slave oder alle Geräte gleichberechtigt
    Entweder ein Master-gerät steuert welches Gerät zu einem bestimmten Zeitpunkt senden darf, oder jedes der gleichberechtigten Geräte kann selbstständig zu senden beginnen

+ Master slave beispiel: I²C
+ alle Gleichberechtigt: CAN

Bei gleichberechtigten Systemen benötigt der Bus ein Verfahren zur 

*** Kollisionsvermeidung:
Wenn mehrere Geräte zugleich zu senden beginnen, muss klar sein, welches Gerät Priorität hat. Die anderen Geräte müssen bemerken, dass ein Gerät mit höherer Priorität sendet und ihre Übertragung abbrechen

Bei mehreren Geräten erhält jedes eine andere Adresse, diese Adresse wird mit den Daten mitgeschickt

*** Bufferung:
jedes Gerät benötigt einen Zwischenspeicher für empfangene Daten (=> Buffer), der vom Gerät ausgelesen wird, sobald es Zeit dazu hat

*** Synchronisierung:
Eine Abfolge von 1en wird vom Sender als durchgehendes HIGH-Signal übertragen => damit Empfänger weiß, wie viele 1en das sind, muss festgelegt werden, wann das nächste gültige Datenbit anliegt.

Erste Möglichkeit (UART): jedes Bit hat eine fest definierte Dauer.

Problem: leicht unterschiedlich schnelle uhren in Empfänger und Sender => müssen regelmäßig synchronisiert werden. Bei der UART dient dafür die fallende Flanke des Start-Bit

Zweite Möglichkeit (I²C Bus): eigene Taktleitung zusätzlich zur Datenleitung im Kabel

*** Datensicherheit / Fehlerkorrigierende codes
Ein einzelner Übertragungsfehler entspricht einem Bit, das zwichen Sender und Empfänger verändert wurde

** RS232 / UART
Universal Asynchronous Receive / Transmit

[[../OfficeLense/2020_09_24 16_33 Office Lens.jpg][RS232]]

| RX: | Recieve  |
| Tx: | Transmit |

[[http://de.wikipedia.org/wiki/EIA-232]]

1 Baud: 1 bit/s

zB: bei 9600baud dauert ein bit 1/9600 sekunden

1011 = 11(dec) = $b \\
1101 = 13(dec) = $d

*** Parity-Bit:
Dient dazu, dass der Empfänger eine *ungerade* Anzahl an übertragungsfehlern in einem zeichen erkennt. Er kann diesen Fehler allerdings nicht korrigieren. Sender und Empfänger vereinbaren dass die Anzahl der Einsen in den Datenbits + Parity-Bit ungerade sein muss, Parity-Bit wird je nach Bedarf vom Sender auf 1 oder 0 gesetzt.

Was bring das Parity-Bit? Wenn zB bei jedem 1000sten übertragenen char ein Bit fehler auftritt, der ohne Parity nicht erkannt wird, entspricht das einem Fehler pro Seite ASCII. Mit Parity-Bit: jedes Tausendste jeder fehlerhaften chars enthält ein zweites fehlerhaftes Bit, welches nicht erkannt wird => ein Bit fehler pro 1 000 000 char => ein fehler alle 1000 Seiten.

*** UART Zusammenfassung:
+ Nur zwei Gesprächsteilnehmer → keine Addressierung nötig
+ Für jede übertragungsrichtung eigene Leitung → Kollisionsvermeidung unnötig
+ Synchronisierung erfolgt über fixe Baudrate / Bitdauer und fallende Flanke des Startbit

*** RS232 Daisychaining
zwischen je zwei Geräten besteht eine [[../OfficeLense/2020_10_08 16_32 Office Lens (1).jpg][Peer to Peer Verbindung]], es gibt keinen Gesamtbus. Jedes Gerät gibt Informationen, die für ein anderes Gerät bestimmt sind, von einer UART an die nächste weiter. Dazu notwendig: Jedes Gerät erhält eine Adresse, mit dem Befehl wird die Adresse des Geräts mitgeschickt, an das der Befehl gerichtet ist. Diese Adresse ist nicht für die einzelne UART, sondern für die ganze [[../OfficeLense/2020_10_08 16_32 Office Lens (2).jpg][Daisychain]].

** Arbitrierung (Kollisionsvermeidung) beim CAN-Bus:
Grundsätzlich fängt kein Gerät an zu schreiben, während ein anderes Gerät schreibt, sondern wartet das Ende der Nachricht ab. Wenn zwei Geräte zugleich zu schreiben beginnen: 
* Finite State Machine (FSM)
Eigenes Programmierprinzip mit folgenden Vorteilen:

- Erweiterbarkeit
- Graphische Planung und Dokumentation

** Prinzipien zur Finit State Machine:
1) jeder Zustand ist eine eigene Bubble und wird als eigene Methode programmiert
2) jeder Übergang zwischen zwei Zuständen ist an eine Bedingung geknüpft => if-statement
3) Zustand wird in einer Globalen Variable gespeichert
4) in der loop ist ein switch(zustand) dass die richtige Methode aufgerufen wird.
** Beispiel: Ampelversion 1
Amepel an einem Fußgängerübergang, wir programmieren nur die Autoampel, da die Fußgängerampel sowieso gegengleich geschaltet wird.

Die ampel soll 5 Sekunden rot sein und dann für 10 Sekunden auf grün schalten.
[[../OfficeLense/2020_12_10 16_10 Office Lens (1).jpg][Schema]]

Um festzustellen ob die Zeit abgelaufen ist, müssen wir uns den Startzeitpunkt des jeweiligen Zeitraums merken => dieses Festlegen einer Variable ist eine eigene Bubble
[[../OfficeLense/2020_12_10 16_10 Office Lens (2).jpg][Schema]] (TODO: rotate this, lol)

** Beispiel: Pakete
[[../OfficeLense/pakete_bubblediagramm.jpg][Diagramm]]
